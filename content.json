{"meta":{"title":"Jacky","subtitle":"blog","description":"hello i am description","author":"Chonggao Liu","url":"http://chonggao.me"},"pages":[{"title":"关于我","date":"2016-07-26T03:10:17.000Z","updated":"2016-07-26T03:43:46.214Z","comments":false,"path":"about/index.html","permalink":"http://chonggao.me/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2016-07-26T03:10:58.000Z","updated":"2016-07-26T03:39:40.881Z","comments":false,"path":"categories/index.html","permalink":"http://chonggao.me/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2016-07-26T03:11:19.000Z","updated":"2016-07-26T03:40:09.120Z","comments":false,"path":"tags/index.html","permalink":"http://chonggao.me/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"初探 JS 数组","slug":"first-array","date":"2016-11-11T04:07:01.000Z","updated":"2016-11-11T04:07:29.610Z","comments":true,"path":"2016/11/11/first-array/","link":"","permalink":"http://chonggao.me/2016/11/11/first-array/","excerpt":"","text":"","categories":[],"tags":[{"name":"Array","slug":"Array","permalink":"http://chonggao.me/tags/Array/"}]},{"title":"正则表达式备忘录","slug":"reg-exp","date":"2016-10-20T02:55:27.000Z","updated":"2016-10-20T03:33:43.533Z","comments":true,"path":"2016/10/20/reg-exp/","link":"","permalink":"http://chonggao.me/2016/10/20/reg-exp/","excerpt":"","text":"正则表达式备忘录&emsp;&emsp;一直以来都是对正则表达式感觉很抵触，主要是因为正则不能 Debug ，一段很长的正则表达式，中间出错，修改一次耗费体力，因为平时很多处理字符串的操作，使得我十分头疼，同事 H 用一个正则就很轻巧的解决了这个问题，让我痛定思痛好好学习一下正则。 JavaScript中的正则表达式&emsp;&emsp;JavaScript 创建正则表达式有 两种方式： 使用正则表达式字面量：var re = /abcd/; 调用 RegExp 对象的构造函数：var re = new RegExp(&quot;abcd&quot;); &emsp;&emsp;构造函数使用场景： 当正则表达式的模式会变发生改变 需要从其他地方得到时（例如用户输入） 匹配字符表 \\：将其后的特殊字符转义为字面量 ^：匹配输入的开始 $：匹配输入的结束 *：匹配前一个表达式0次或者多次，等价于 {0,} +：匹配前一个表达式1次或多次，等价于 {1,} ?：匹配前一个表达式0次或者1次，等价于 {0,1} .：匹配除了换行符（\\n）之外的任何单个字符 (x)：匹配「x」并记住匹配项 (?:x)：匹配「x」但不记住匹配项 x(?=y): 匹配「x」并且「x」后面跟着「y」也叫作正向肯定查找 x(?!y)：匹配「x」并且「x」后面不跟着「y」也叫作正向否定查找 x | y：匹配「x」或者「y」 {n}：匹配前一个字符 n 次 {n, m}：匹配前一个字符最少 n 次 [xyz]：匹配括号中的任意一个字符，可以使用 - 指定范围 [^xyz]: 匹配任何不在括号中的字符 \\b：匹配一个词的边界 \\B：匹配非单词边界 \\d：匹配一个数字 \\D：匹配一个非数字字符，等价于 [^0-9] \\f：匹配一个换页符 \\n：匹配一个换行符 \\r: 匹配一个回车符 \\s：匹配一个空白字符 \\S：匹配一个非空白字符 \\t：匹配一个水平制表符 \\v: 匹配一个垂直制表符 \\w：匹配一个单字字符，等价于 [A-Za-z0-9_] \\W：匹配一个非单字字符，等价于 [^A-Za-z0-9_] 网站分享&emsp;&emsp;虽说正则不能 Debug 但是有一些可以辅助你查看正则的网站，例如 Regulex 文章参考《正则表达式》 MDN文档推荐《javascript正则表达式》 司徒正美早期文章，依旧值得参考《正则表达式30分钟入门教程》 说是30分钟但是值得推敲和思考","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://chonggao.me/tags/JavaScript/"},{"name":"RegExp","slug":"RegExp","permalink":"http://chonggao.me/tags/RegExp/"}]},{"title":"前端很美 而你刚好有空","slug":"beautiful-world","date":"2016-07-25T07:00:22.000Z","updated":"2016-10-20T07:49:20.326Z","comments":true,"path":"2016/07/25/beautiful-world/","link":"","permalink":"http://chonggao.me/2016/07/25/beautiful-world/","excerpt":"","text":"Hello World&emsp;&emsp;程序猿打开新世界的大门后，惯例性的会敲上 Hello World ，对于我来说 Hello World 也是我打开前端大门的开始。 &emsp;&emsp;第一次接触前端应该是大二时候，大学时期 J2EE 的实验课，寝室老九和我做后端(后端我也是个打杂的)，把前端的工作交给我了，记得那个时候第一次打开 w3school 简单的看了 HTML CSS ，这些简单的标签和布局样式，当时还秉承着这些是很简单的东西，后端才是主流(e.g. PHP 是世界上最好的语言)，前端只是辅助后端让界面看起来更好看这样的想法，只能说那时候的自己真的是 too young too naive。 1&lt;marquee&gt; 你好我是跑马灯的文字 &lt;/marquee&gt; &emsp;&emsp; J2EE 的大实验是一个论坛系统，具体的东西已经记不清了，只记得上面一个跑马灯的标签，从它开始，让我感觉前端好有意思啊(捂脸.gif)，可能是对于画面感强烈的事物比较感兴趣，大学使用超多 AE 模板配合绘声绘影制作一些视频，或许对前端的热爱从那个时候埋下了种子。 &emsp;&emsp;也是那年暑假，一头扎进帝都，做神州数码的一个外包 ERP 的实习，还记得每天早上麦当劳的 6 元早餐；还记得每天地铁上一个半小时的拥挤；还记得每天中钢国际便宜好吃的食堂…唯独不记得当时做过的 ERP 项目，感觉每天为了数据的东西写各种 sql ，对我来说真的是一种煎熬，那时候就想起了做前端的感觉，那年暑假坚定了我不喜欢做后端的决心。 &emsp;&emsp;毕业前的暑假，拿着一份后端的简历决定去找一份前端工作，海投的简历都基本石沉大海，面试过的大公司也因为各种原因(主要是自身原因，很感谢当时面试我给予我很多建议的前辈)，连一个实习的机会都不肯给，那个时候对于前端的渴望，就像憋气潜水对于空气的渴望，却也在那个时候更加坚定了我想要做前端的想法。 &emsp;&emsp;大概 20 多天的求职，受挫过后买了车票想要回学校，曾经在内推网投的一份简历，当时并没有放在心上，给我发来了面试邀请，当时暗暗告诉自己最后一个面试了，破罐破摔吧，当时是现在的 CTO 面试我，问了两道算法题，我都说不会(愧对本专业)，我说我想做前端，CTO 问我他凭什么给我一份前端的工作，我说凭我对前端的热爱(当时真的好有胆量说出这个话啊)，最后他给了我一个前端实习的 offer。 &emsp;&emsp;那时候距离现在刚好三年时间(正式工作才刚满两年)，三年我一直在做我喜欢的前端，虽说技术很烂，自己很懒，但是我始终保持对前端喜爱的热度慢慢向前爬，现在的工作给予我做前端的机会，就像即将枯萎的树木枝干，久旱逢甘雨，所以我始终坚信，越努力，你才会越幸运…","categories":[],"tags":[{"name":"First Article","slug":"First-Article","permalink":"http://chonggao.me/tags/First-Article/"}]}]}